using TextGrid, DelimitedFiles

"""
insertTranscription() - Insert transcription generated by speech-to-text software/services into a TextGrid file.

Inputs:
TextGridFile - Full path to the TextGrid file to insert the transcription
               annotaion as a new item. a new file will be saved to the
               same location with annotation (original file doesn't change)

transcription - The text file generated by speech-to-text tool containing
                the words and corresponding "offset" and "duration" for each word.
                File must be in the following format:
                "SpeakerInterval#" "#ofWordsInTheInterval"
                "word" "offset" "duration"
                "word" "offset" "duration"
                "word" "offset" "duration"
                        .
                        .
                        .

speakerOrder - The speaker (1 or 2) corresponding to the transcription.

item - The number corresponding to the "item [#]" line in the TextGrid file.

Output:
is the tartget TextGrid file to include the transcription on as an "IntervalTier" interval.

Note: the "size = #" line need to be changed when a new item is inserted
      (i.e. increase by 1 for each new item)

# Examples
```@example
using TextGrid
TextGridFile = raw"Path\\Example.TextGrid"
transcription = raw"Path\\transcription.txt"
# insert transcription into TextGridFile for speaker #1 at item #10
insertWords(TextGridFile, transcription, 1, 10)
```

"""
function insertTranscription(TextGridFile, transcription, speakerOrder, item)
    # save new TextGrid file in TextGridFile's location
    output = TextGridFile[begin:findlast(".", TextGridFile)[1]-1]*"S$speakerOrder"*"_copy.TextGrid"
    interval = extract(TextGridFile)
    speakerOrder == 1 ? S_info = interval[1] : S_info = interval[5] # speaker 1 or 2 (interval 1 or 5)
    words = readdlm(transcription) # store results from speech-to-text
    allWords = fillWords(S_info, words, speakerOrder, interval[1][end][2]) # create empty vector to insert all words in

    # set item info
    class = "IntervalTier"
    name = "Words S"*string(speakerOrder)
    size1 = length(allWords)
    xmin = 0
    xmax = interval[1][end][2]

    # open transcription to read
    f = open(transcription, "r")

    open(output, "w") do file # open file for writing
        # insert interval information
        write(file, " "^4*"item ["*string(item)*"]:\n")
        write(file, " "^8*"class = \""*class*"\" \n")
        write(file, " "^8*"name = \""*name*"\" \n")
        write(file, " "^8*"xmin = "*string(xmin)*" \n")
        write(file, " "^8*"xmax = "*string(xmax)*" \n")
        write(file, " "^8*"intervals: size = "*string(size1)*" \n")
        for n in 1:length(allWords) # insert annotation for each word
            write(file, " "^8*"intervals ["*string(n)*"]:\n") #interval[""]
            write(file, " "^12*"xmin = "*string(allWords[n][1])*" \n") #xmin = ""
            write(file, " "^12*"xmax = "*string(allWords[n][2])*" \n") #xmax = ""
            write(file, " "^12*"text = \""*string(allWords[n][3])*"\" \n") #text = ""
        end
    end
    return nothing
end


# first version, all words seperated
function fillWords(S_info, words, speakerOrder, xmax)
    allWords = [] # create empty vector to insert all words in
    cnt = 0
    for i in 1:length(S_info)
        if S_info[i][3] == "S$speakerOrder" # check if speaker interval contains "S1" or "S2"
            cnt += 1
            start = round( S_info[i][1], digits=3)
            ends = round( S_info[i][2], digits=3)
            for n in 1:words[cnt,:][2] # for each word in the current interval, append (start time, end time, word) to allWords vector
                s = round( start + words[cnt+n,:][2] / 10^7, digits=3)
                e = round( s + words[cnt+n,:][3] / 10^7, digits = 3)
                # println(words[cnt+n,:][1], " ", s, " : ", e)
                append!(allWords,[ [s,e,words[cnt+n,:][1]] ])
            end
            cnt += words[cnt,:][2] # go to next interval
        end
    end

    # insert empty intervals to allow manually editing TextGrid
    insert!(allWords,1, [0, allWords[1][1], ""]) # insert "" to first word interval
    temp = copy( allWords )
    for i in length(temp):-1:2
        temp[i][1] !== temp[i-1][2] ? insert!(allWords,i, [allWords[i-1][2], allWords[i][1], ""]) : nothing
    end
    insert!(allWords,length(allWords)+1, [allWords[end][2], xmax, ""]) # insert "" to last word interval
    return allWords
end


# second version
# function fillWords(S_info, words, speakerOrder, xmax)
#     allWords = [] # create empty vector to insert all words in
#     cnt = 0
#     for i in 1:length(S_info)
#         if S_info[i][3] == "S$speakerOrder" # check if speaker interval contains "S1" or "S2"
#             cnt += 1
#             start = round( S_info[i][1], digits=3)
#             ends = round( S_info[i][2], digits=3)
#             for n in 1:words[cnt,:][2] # for each word in the current interval, append (start time, end time, word) to allWords vector
#                 s = round( start + words[cnt+n,:][2] / 10^7, digits=3)
#                 e = round( s + words[cnt+n,:][3] / 10^7, digits = 3)
#                 # println(words[cnt+n,:][1], " ", s, " : ", e)
#                 append!(allWords,[ [s,e,words[cnt+n,:][1]] ])
#             end
#             cnt += words[cnt,:][2] # go to next interval
#         end
#     end
#
#     # insert empty intervals to allow manually editing TextGrid
#     insert!(allWords,1, [0, allWords[1][1], ""]) # insert "" to first word interval
#     temp = copy( allWords )
#     for i in length(temp):-1:2
#         temp[i][1] !== temp[i-1][2] ? insert!(allWords,i, [allWords[i-1][2], allWords[i][1], ""]) : nothing
#     end
#     insert!(allWords,length(allWords)+1, [allWords[end][2], xmax, ""]) # insert "" to last word interval
#     return allWords
# end
